// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package models

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addPerson = `-- name: AddPerson :one
insert into people (uuid,name,nickname,birthdate,stack)
    values ($1,$2,$3,$4,$5) RETURNING id
`

type AddPersonParams struct {
	Uuid      uuid.UUID
	Name      string
	Nickname  string
	Birthdate time.Time
	Stack     []string
}

func (q *Queries) AddPerson(ctx context.Context, arg AddPersonParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addPerson,
		arg.Uuid,
		arg.Name,
		arg.Nickname,
		arg.Birthdate,
		pq.Array(arg.Stack),
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const countPeople = `-- name: CountPeople :one
select count(*) from people
`

func (q *Queries) CountPeople(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPeople)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPeople = `-- name: GetPeople :many
select id,uuid,name,nickname,birthdate,stack,created_at
    from people
`

func (q *Queries) GetPeople(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPeople)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Nickname,
			&i.Birthdate,
			pq.Array(&i.Stack),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerson = `-- name: GetPerson :one
SELECT id,uuid,name,nickname,birthdate,stack,created_at
    FROM people WHERE uuid = $1
`

func (q *Queries) GetPerson(ctx context.Context, argUuid uuid.UUID) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, argUuid)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Nickname,
		&i.Birthdate,
		pq.Array(&i.Stack),
		&i.CreatedAt,
	)
	return i, err
}
